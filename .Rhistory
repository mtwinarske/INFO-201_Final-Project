print("no coffee for you!")
office_temperature <- 51
if(office_temperature < ideal_temperature) {
print("You can buy coffee!")
} else if(office_temperature > ideal_temperature)
print("no coffee for you!")
office_temperature <- 64
if(office_temperature < ideal_temperature) {
print("You can buy coffee!")
} else if(office_temperature > ideal_temperature)
print("no coffee for you!")
office_temperature <- 32
if(office_temperature < ideal_temperature) {
print("You can buy coffee!")
} else if(office_temperature > ideal_temperature)
print("no coffee for you!")
money <- 15
coffee_cost <- 5
money <- 15
coffee_cost <- 5
if(money > coffee_cost){
print("You can buy coffee!")
} else if (money < coffee_cost){
print("You are too broke for an expensive late...")
}
money <- 2
if(money > coffee_cost){
print("You can buy coffee!")
} else if (money < coffee_cost){
print("You are too broke for an expensive late...")
}
n <- 10:49
names <- c("Miles, Rose, Sophila")
print(names())
# Create a vector `names` that contains your name and the names of 2 other students. Print the vector.
names <- c("Miles", "Rose", "Sophila")
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n_less_m <- n - m
print(n_less_m)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Subtract `m` FROM `n`. Note the recycling!
n_less_m <- n - m
print(n_less_m)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Exercise 7-1
# Create a vector `names` that contains your name and the names of 2 other students. Print the vector.
names <- c("Miles", "Rose", "Sophila")
print(names())
# Create a vector `names` that contains your name and the names of 2 other students. Print the vector.
names <- c("Miles", "Rose", "Sophila")
print(names())
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n_less_m <- n - m
print(n_less_m)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave)
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Add in the necessary code to make these names a vector and assign it to the variable below
attendees <- c("Rachel SR", "Prof. Walsh, PhD", "Vera FR", "Prof. Hendry, PhD", "Lily JR", "Najma SR", "Prof. Baeten MD", "Prof. Chu, MD", "Li FR")
# Load the stringr library
install.packages("stringr")
movies <- c("Barbie", "Oppenheimer", "Mean Girls", "Maze Runner", "Harry Potter")
library("stringr") #loads in the stringr library, all library statements must be at the top of the page!
library("stringr") #loads in the stringr library, all library statements must be at the top of the page!
library(dplyr)
# Note: You may have to run: install.packages("testthat")
library(testthat)
# Note: You may have to run:
install.packages("testthat")
library(testthat)
library(testthat)
source("~/Downloads/hw2_games/hw2.r")
install.packages("testthat")
source("~/Downloads/hw2_games/hw2.r")
source("~/Downloads/hw2_games/hw2.r")
install.packages("testthat")
source("~/Downloads/hw2_games/hw2.r")
install.packages("testthat")
source("~/Downloads/hw2_games/hw2.r")
source("~/Downloads/hw2_games/hw2.r")
install.packages("testthat")
# Note: make sure to set your source-> working directory to current file location
games_df <- read.csv("2013_Video_Games_Dataset.csv") #loads in your dataset DO NOT CHANGE!!
source("~/Downloads/hw2_games/hw2.r")
# Note: make sure to set your source-> working directory to current file location
games_df <- read.csv("2013_Video_Games_Dataset.csv") #loads in your dataset DO NOT CHANGE!!
library(readr)
X2013_Video_Games_Dataset <- read_csv("Downloads/hw2_games/2013_Video_Games_Dataset.csv")
View(X2013_Video_Games_Dataset)
# Note: make sure to set your source-> working directory to current file location
games_df <- read.csv("2013_Video_Games_Dataset.csv") #loads in your dataset DO NOT CHANGE!!
library(dplyr)
library(dplyr)
# load presidential elections dataset
# Note: run install.packages("pscl")
install.packages("pscl")
library(pscl)
View(presidentialElections)
# normal call to count rows of data
nrow(presidentialElections)
# pipe operator version
presidentialElections %>% nrow()
# normal call to filter for year 1932
filter(presidentialElections, year == 1932)
# pipe operator version
presidentialElections %>% filter(year == 1932)
# the benefit of pipe, is it lets us chain functions together
presidentialElections %>%
filter(year == 1932)
## demo mutate
# make a copy of the elections dataframe
pres_df <- presidentialElections
# demo of min/max
pres_df %>%
summarise(min_dem_vote = min(dem_vote))
# demo of min/max
pres_df %>%
summarise(min_dem_vote = min(demVote))
# get the value from the df above
min_dem_vote <-
pres_df %>%
summarise(min_dem_vote - min(demVote)) %>%
pull(min_dem_vote)
# get the value from the df above
min_dem_vote <-
pres_df %>%
summarise(min_dem_vote - min(demVote)) %>%
pull(min_dem_vote)
# what row did that happen?
min_dem_vote_rows <-
pres_df %>%
filter(demVote == min(demVote))
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
Your code here
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
"))
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
View(np_data)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- %>% mutate(park_state = ParkName, State)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data %>% mutate(park_state = ParkName, State)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = ParkName, State)
View(np_data)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = "Park_State")
View(np_data)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = ParkName, State)
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row)
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <-
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <-
# Now "pull" only the max number of visits and save as min_visits
min_visits <-
# Which National Parks have the lowest number of visits?
# What do you think explains this number or this pattern?
####### A Question That We Can't Quite Answer Yet...
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <-
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <-
# Now "pull" only the max number of visits and save as min_visits
min_visits <-
# Which National Parks have the lowest number of visits?
# What do you think explains this number or this pattern?
####### A Question That We Can't Quite Answer Yet...
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits))) %>%
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = "ParkName", "State")
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# Now "pull" only the max number of visits and save as max_visits
max_visits <- np_data %>%
filter(RecreationVisits == max(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <- np_data %>%
filter(RecreationVisits == min(RecreationVisits))
# Now "pull" only the max number of visits and save as min_visits
min_visits <- np_data %>%
filter(RecreationVisits == min(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# Now "pull" only the max number of visits and save as max_visits
max_visits <- np_data %>%
filter(RecreationVisits == max(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <- np_data %>%
filter(RecreationVisits == min(RecreationVisits))
# Now "pull" only the max number of visits and save as min_visits
min_visits <- np_data %>%
filter(RecreationVisits == min(RecreationVisits)) %>%
pull(RecreationVisits)
# Which National Parks have the lowest number of visits?
# Load the National Park data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv ")
# Find the average number of visits for each National Park
# Save as avg_park_visits and View()
# What park has the most and least average visits?
# What patterns or surprises do you notice?
avg_state_visits <- np_data %>%
group_by(State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_state_visits)
# Find the average number of visits for each state
# Save as avg_state_visits and View()
# What state has the most and least average visits?
# What patterns or surprises do you notice?
avg_park_visits <- np_data %>%
group_by(ParkName, State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_park_visits)
# Find the number of distinct parks for each state
# Save as distinct_parks
# Which state has the most national parks?
# What patterns or surprises do you notice?
distinct_parks <- np_data %>%
group_by(State) %>%
summarize(distinct_parks = n_distinct(ParkName))
survivor_df <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/Survivor-Viewers.csv", stringsAsFactors = FALSE)
library(dplyr)
View(survivor_df)
View(survivor_df)
# Calculate the average number of viewers for each season `avg_viewers`
avg_viewers <- survivor_df %>%
group_by(season) %>%
summarise(avg_viewers = mean(viewers, na.rm = TRUE))
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers)
View(avg_viewers)
View(avg_viewers)
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers)
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
# Find the episode with the most number of viewers, then pull the number of viewers and save it as a variable `most_views`
most_views <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
install.packages("nycflights13")
# Install package/data
install.packages("nycflights13")
# Load necessary libraries
library("nycflights13")
library("dplyr")
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
View(airports)
View(airports)
View(airlines)
View(flights)
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# Load necessary libraries
library("nycflights13")
library("dplyr")
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
setwd("/Users/miles/Desktop/GitHub/INFO-201_Final-Project")
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
