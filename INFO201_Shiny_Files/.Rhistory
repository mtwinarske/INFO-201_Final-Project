np_data <- np_data %>% mutate(park_state = ParkName, State)
View(np_data)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = "Park_State")
View(np_data)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = ParkName, State)
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row)
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <-
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <-
# Now "pull" only the max number of visits and save as min_visits
min_visits <-
# Which National Parks have the lowest number of visits?
# What do you think explains this number or this pattern?
####### A Question That We Can't Quite Answer Yet...
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <-
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <-
# Now "pull" only the max number of visits and save as min_visits
min_visits <-
# Which National Parks have the lowest number of visits?
# What do you think explains this number or this pattern?
####### A Question That We Can't Quite Answer Yet...
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits))) %>%
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = "ParkName", "State")
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# Now "pull" only the max number of visits and save as max_visits
max_visits <- np_data %>%
filter(RecreationVisits == max(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <- np_data %>%
filter(RecreationVisits == min(RecreationVisits))
# Now "pull" only the max number of visits and save as min_visits
min_visits <- np_data %>%
filter(RecreationVisits == min(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# Now "pull" only the max number of visits and save as max_visits
max_visits <- np_data %>%
filter(RecreationVisits == max(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <- np_data %>%
filter(RecreationVisits == min(RecreationVisits))
# Now "pull" only the max number of visits and save as min_visits
min_visits <- np_data %>%
filter(RecreationVisits == min(RecreationVisits)) %>%
pull(RecreationVisits)
# Which National Parks have the lowest number of visits?
# Load the National Park data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv ")
# Find the average number of visits for each National Park
# Save as avg_park_visits and View()
# What park has the most and least average visits?
# What patterns or surprises do you notice?
avg_state_visits <- np_data %>%
group_by(State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_state_visits)
# Find the average number of visits for each state
# Save as avg_state_visits and View()
# What state has the most and least average visits?
# What patterns or surprises do you notice?
avg_park_visits <- np_data %>%
group_by(ParkName, State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_park_visits)
# Find the number of distinct parks for each state
# Save as distinct_parks
# Which state has the most national parks?
# What patterns or surprises do you notice?
distinct_parks <- np_data %>%
group_by(State) %>%
summarize(distinct_parks = n_distinct(ParkName))
survivor_df <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/Survivor-Viewers.csv", stringsAsFactors = FALSE)
library(dplyr)
View(survivor_df)
View(survivor_df)
# Calculate the average number of viewers for each season `avg_viewers`
avg_viewers <- survivor_df %>%
group_by(season) %>%
summarise(avg_viewers = mean(viewers, na.rm = TRUE))
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers)
View(avg_viewers)
View(avg_viewers)
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers)
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
# Find the episode with the most number of viewers, then pull the number of viewers and save it as a variable `most_views`
most_views <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
install.packages("nycflights13")
# Install package/data
install.packages("nycflights13")
# Load necessary libraries
library("nycflights13")
library("dplyr")
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
View(airports)
View(airports)
View(airlines)
View(flights)
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# Load necessary libraries
library("nycflights13")
library("dplyr")
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
library(tidycensus)
library(sf)
library(tidyverse)
library(viridis)
library(tidycensus)
library(sf)
get_king_county_tracts <- function() {
# Set your Census API key (replace with your actual key)
census_api_key("5adc81c9c101a3cbe6db02d12867966425f6e5cf", install = TRUE)
# Fetch Census tract data for King County
king_county_tracts <- get_decennial(
geography = "tract",
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
return(king_county_tracts)
}
# Call the custom function to get King County tract shapes
king_tracts_sf <- get_king_county_tracts()
# Set your Census API key (replace with your actual key)
census_api_key("5adc81c9c101a3cbe6db02d12867966425f6e5cf", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_API_KEY")
# Fetch Census tract data for King County
king_county_tracts <- get_decennial(
geography = "tract",
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
return(king_county_tracts)
get_king_county_tracts <- function() {
# Set your Census API key (replace with your actual key)
census_api_key("5adc81c9c101a3cbe6db02d12867966425f6e5cf", install = TRUE, overwrite = TRUE)
# Fetch Census tract data for King County
king_county_tracts <- get_decennial(
geography = "tract",
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
return(king_county_tracts)
}
# Call the custom function to get King County tract shapes
king_tracts_sf <- get_king_county_tracts()
# Now you can explore and visualize the data (e.g., create maps)
# For example:
plot(king_tracts_sf["geometry"])
# Fetch Census tract data for King County
king_county_tracts <- get_decennial(
geography = "tract",
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
# Fetch Census tract data for King County
king_county_tracts <- get_decennial(
geography = "tract",
variables = "GEOID",  # Specify at least one variable (e.g., GEOID)
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
king_tracts_sf <- get_king_county_tracts()
# Fetch Census tract data for King County
king_county_tracts <- get_decennial(
geography = "tract",
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
# Fetch Census tract data for King County
king_county_tracts <- get_decennial(
geography = "tract",
variables = c('H0050001', 'PCO0030001'),
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
# Fetch Census tract data for King County
king_county_tracts <- get_decennial(
geography = "tract",
variables = c('PCO0030001'),
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
# Fetch Census tract data for King County
king_county_tracts <- get_acs(
geography = "tract",
variables = c('S0802'),
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
# Fetch Census tract data for King County
king_county_tracts <- get_acs(
geography = "tract",
variables = "S0802",
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
# Fetch Census tract data for King County
king_county_tracts <- get_acs(
geography = "tract",
variables = c('B01001_020E'),
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
return(king_county_tracts)
get_king_county_tracts <- function() {
# Set your Census API key (replace with your actual key)
census_api_key("5adc81c9c101a3cbe6db02d12867966425f6e5cf", install = TRUE, overwrite = TRUE)
# Fetch Census tract data for King County
king_county_tracts <- get_acs(
geography = "tract",
variables = c('B01001_020E'),
state = "WA",
county = "King",
geometry = TRUE,
year = 2020
)
return(king_county_tracts)
}
king_tracts_sf <- get_king_county_tracts()
plot(king_tracts_sf["geometry"])
read_csv("TransitCenterLocations.csv")
setwd("~/Desktop/GitHub/INFO-201_Final-Project")
read_csv("TransitCenterLocations.csv")
TransitCenter_df <- read_csv("TransitCenterLocations.csv")
TransitCenter_map <- ggplot(TransitCenter_df) +
geom_point(aes(x = Long,
y = Lat,
color = "red"))
coord_map("mercator")
plot(TransitCenter_map)
plot(TransitCenter_map)
TransitCenter_map <- ggplot(TransitCenter_df) +
geom_point(aes(x = Long,
y = Lat,
color = "red")) +
plot(king_tracts_sf["geometry"]) +
coord_map("mercator")
plot(TransitCenter_map)
TransitCenter_map <- ggplot(TransitCenter_df) +
geom_point(aes(x = Long,
y = Lat,
color = "red")) +
plot(king_tracts_sf["geometry"]) +
coord_map("mercator")
TransitCenter_map <- ggplot(king_tracts_sf) +
geom_sf() +  # Plot the Census tract shapes
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat), color = "red") +
coord_map("mercator")
plot(TransitCenter_map)
rlang::last_trace()
plot(king_tracts_sf ['geometry'])
plot(TransitCenter_map ['geometry'])
TransitCenter_map <- ggplot(king_tracts_sf) +
geom_sf() +  # Plot the Census tract shapes
geom_point(data = TransitCenter_df, aes(x = Long,
y = Lat,
color = "red")) +
coord_map("mercator"),
TransitCenter_map <- ggplot(king_tracts_sf) +
geom_sf() +  # Plot the Census tract shapes
geom_point(data = TransitCenter_df, aes(x = Long,
y = Lat,
color = "red")) +
coord_map("mercator")
plot(TransitCenter_map ['geometry'])
shiny::runApp('INFO201_Shiny_Files')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
