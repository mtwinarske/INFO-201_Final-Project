pres_df %>%
summarise(min_dem_vote = min(dem_vote))
# demo of min/max
pres_df %>%
summarise(min_dem_vote = min(demVote))
# get the value from the df above
min_dem_vote <-
pres_df %>%
summarise(min_dem_vote - min(demVote)) %>%
pull(min_dem_vote)
# get the value from the df above
min_dem_vote <-
pres_df %>%
summarise(min_dem_vote - min(demVote)) %>%
pull(min_dem_vote)
# what row did that happen?
min_dem_vote_rows <-
pres_df %>%
filter(demVote == min(demVote))
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
Your code here
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
"))
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
View(np_data)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- %>% mutate(park_state = ParkName, State)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data %>% mutate(park_state = ParkName, State)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = ParkName, State)
View(np_data)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = "Park_State")
View(np_data)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = ParkName, State)
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row)
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <-
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <-
# Now "pull" only the max number of visits and save as min_visits
min_visits <-
# Which National Parks have the lowest number of visits?
# What do you think explains this number or this pattern?
####### A Question That We Can't Quite Answer Yet...
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
summarise(max_visits_row - max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <-
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <-
# Now "pull" only the max number of visits and save as min_visits
min_visits <-
# Which National Parks have the lowest number of visits?
# What do you think explains this number or this pattern?
####### A Question That We Can't Quite Answer Yet...
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits))) %>%
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
pull(max_visits_row) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State)
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = "ParkName", "State")
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# What is the single greatest number of Recreation Visits for any National Park in any year?
# Save this filtered row as max_visits_row
max_visits_row <-
np_data %>%
filter(max_visits_row == max(RecreationVisits)) %>%
# Now "pull" only the max number of visits and save as max_visits
max_visits <- max_visits_row
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# Now "pull" only the max number of visits and save as max_visits
max_visits <- np_data %>%
filter(RecreationVisits == max(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <- np_data %>%
filter(RecreationVisits == min(RecreationVisits))
# Now "pull" only the max number of visits and save as min_visits
min_visits <- np_data %>%
filter(RecreationVisits == min(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the average number of visits for each National Park from 1979-2020?
# Save as avg_visits
# NOTE: You probably won't be able to answer this question without a new DPLYR concept, but make your best effort and try to identify what steps are missing
Your code here
# Load the data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv(url("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv"))
# Add a new column "park_state" to the dataframe that combines the name of each National Park and the state in which it is located like so
# Olympic NP, WA
np_data <- np_data %>% mutate(park_state = (ParkName, State))
# Now "pull" only the max number of visits and save as max_visits
max_visits <- np_data %>%
filter(RecreationVisits == max(RecreationVisits)) %>%
pull(RecreationVisits)
# What is the lowest number of Recreation Visits for any National Park in any year?
# Save this filtered row as min_visits_row
min_visits_row <- np_data %>%
filter(RecreationVisits == min(RecreationVisits))
# Now "pull" only the max number of visits and save as min_visits
min_visits <- np_data %>%
filter(RecreationVisits == min(RecreationVisits)) %>%
pull(RecreationVisits)
# Which National Parks have the lowest number of visits?
# Load the National Park data from the following URL
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv
# Save as np_data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv ")
# Find the average number of visits for each National Park
# Save as avg_park_visits and View()
# What park has the most and least average visits?
# What patterns or surprises do you notice?
avg_state_visits <- np_data %>%
group_by(State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_state_visits)
# Find the average number of visits for each state
# Save as avg_state_visits and View()
# What state has the most and least average visits?
# What patterns or surprises do you notice?
avg_park_visits <- np_data %>%
group_by(ParkName, State) %>%
summarize(avg_visits = mean(RecreationVisits))
View(avg_park_visits)
# Find the number of distinct parks for each state
# Save as distinct_parks
# Which state has the most national parks?
# What patterns or surprises do you notice?
distinct_parks <- np_data %>%
group_by(State) %>%
summarize(distinct_parks = n_distinct(ParkName))
survivor_df <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/Survivor-Viewers.csv", stringsAsFactors = FALSE)
library(dplyr)
View(survivor_df)
View(survivor_df)
# Calculate the average number of viewers for each season `avg_viewers`
avg_viewers <- survivor_df %>%
group_by(season) %>%
summarise(avg_viewers = mean(viewers, na.rm = TRUE))
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers)
View(avg_viewers)
View(avg_viewers)
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers)
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
# Find the episode with the most number of viewers, then pull the number of viewers and save it as a variable `most_views`
most_views <- survivor_df %>%
filter(viewers == max(viewers, na.rm=TRUE)) %>%
pull(viewers)
install.packages("nycflights13")
# Install package/data
install.packages("nycflights13")
# Load necessary libraries
library("nycflights13")
library("dplyr")
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
View(airports)
View(airports)
View(airlines)
View(flights)
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
avg_dep_delay_airline <- flights_airlines_df %>%
group_by(name) %>%
summarize(delay = mean(dep_delay))
# Install package/data
install.packages("nycflights13")
install.packages("nycflights13")
# Load necessary libraries
library("nycflights13")
library("dplyr")
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flight %>%
group_by(month) %>%
summarise(delay = mean(dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
flights_airlines_df <- left_join(flights, airlines)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
map_joined_data <-  left_join(map_unjoined_data,IncomeTransit_df, by = "GEOID")
# file to find, and write a geojson file for mapmaking in INFO: 201 final project
# Group BF-5: Angel, Rose, Miles
TransitCenter_df <- read_csv("TransitCenterLocations.csv")
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
map_unjoined_data <- st_read("2020CensusTracts.geojson")
map_unjoined_data$GEOID <- paste0("1400000US", map_unjoined_data$GEOID)
map_joined_data <-  left_join(map_unjoined_data,IncomeTransit_df, by = "GEOID")
library(tidycensus)
library(sf)
library(tidyverse)
library(viridis)
library(ggplot2)
library(plot)
# file to find, and write a geojson file for mapmaking in INFO: 201 final project
# Group BF-5: Angel, Rose, Miles
TransitCenter_df <- read_csv("TransitCenterLocations.csv")
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
setwd("~/Desktop/GitHub/INFO-201_Final-Project")
library(tidycensus)
library(sf)
library(tidyverse)
library(viridis)
library(ggplot2)
library(plot)
# file to find, and write a geojson file for mapmaking in INFO: 201 final project
# Group BF-5: Angel, Rose, Miles
TransitCenter_df <- read_csv("TransitCenterLocations.csv")
library(plot)
# file to find, and write a geojson file for mapmaking in INFO: 201 final project
# Group BF-5: Angel, Rose, Miles
TransitCenter_df <- read_csv("TransitCenterLocations.csv")
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
setwd("~/Desktop/GitHub/INFO-201_Final-Project/INFO201_Shiny_Files")
# file to find, and write a geojson file for mapmaking in INFO: 201 final project
# Group BF-5: Angel, Rose, Miles
TransitCenter_df <- read_csv("TransitCenterLocations.csv")
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
map_unjoined_data <- st_read("2020CensusTracts.geojson")
map_unjoined_data$GEOID <- paste0("1400000US", map_unjoined_data$GEOID)
map_joined_data <-  left_join( IncomeTransit_df, map_unjoined_data, by = "GEOID")
View(map_joined_data)
map_unjoined_data$GEOID <- paste0("1400000US", map_unjoined_data$GEOID)
View(map_joined_data)
st_write(map_joined_data, "king_county_tracts.geojson")
map_data<- st_read("king_county_tracts.geojson")
View(map_joined_data)
TransitCenter_df <- read_csv("TransitCenterLocations.csv")
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
map_data <- st_read("King_county_tracts.geojson")
# Transit Map
TransitUsage_map <- ggplot(map_data) +
geom_sf(aes(fill = Estimate.Public.Transportation.Users.), linetype = 0.5, lwd = 1) +
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow")
# Carpool Map
Carpool_map <- ggplot(map_data) +
geom_sf(aes(fill = Estimate.Car.truck.or.van.households.carpooled.), linetype = 0.5, lwd = 1) +
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow")
# Income Bracket Map
IncomeBracket_map <- ggplot(map_data) +
geom_sf(aes(fill = median_income), linetype = 0.5, lwd = 1) +
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow")
# Display the map
plot(TransitUsage_map)
plot(IncomeBracket_map)
plot(Carpool_map)
output$map_plot <- renderPlotly({
if (input$map_chart_type == "Total Transit Trips per Household") {
plot_data <- data$Estimate.Public.Transportation.households.
title_map <- "Total Public Transportation Trips per Household in King County, WA"
} else if (input$map_chart_type == "Total Household Carpools") {
plot_data <- data$Estimate.Car.truck.van.households.carpooled.
title_map <- "Total Carpool trips per Household in King County, WA"
}
base_map <- ggplot(map_data) +
geom_sf(aes(fill = plot_data)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow") +
labs(title = title_map,
fill = input$map_chart_type)
<- ggplot(map_data) +
base_map  <- ggplot(map_data) +
geom_sf(aes(fill = median_income), linetype = 0.5, lwd = 1) +
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow")+
labs(title = title_map,
fill = input$map_chart_type)
ggplotly(base_map)
library(tidycensus)
library(sf)
library(tidyverse)
library(ggplot2)
library(plotly)
TransitCenter_df <- read_csv("TransitCenterLocations.csv")
IncomeTransit_df <- read.csv("IncomeTransitAlt.csv")
map_data <- st_read("King_county_tracts.geojson")
# Transit Map
TransitUsage_map <- ggplot(map_data) +
geom_sf(aes(fill = Estimate.Public.Transportation.Users.), linetype = 0.5, lwd = 1) +
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow")
# Carpool Map
Carpool_map <- ggplot(map_data) +
geom_sf(aes(fill = Estimate.Car.truck.or.van.households.carpooled.), linetype = 0.5, lwd = 1) +
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow")
# Income Bracket Map
IncomeBracket_map <- ggplot(map_data) +
geom_sf(aes(fill = median_income), linetype = 0.5, lwd = 1) +
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow")
# Display the map
plot(TransitUsage_map)
plot(IncomeBracket_map)
plot(Carpool_map)
output$map_plot <- renderPlotly({
if (input$map_chart_type == "Total Transit Trips per Household") {
plot_data <- data$Estimate.Public.Transportation.households.
title_map <- "Total Public Transportation Trips per Household in King County, WA"
} else if (input$map_chart_type == "Total Household Carpools") {
plot_data <- data$Estimate.Car.truck.van.households.carpooled.
title_map <- "Total Carpool trips per Household in King County, WA"
}
base_map <- ggplot(map_data) +
geom_sf(aes(fill = plot_data)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow") +
labs(title = title_map,
fill = input$map_chart_type)
base_map  <- ggplot(map_data) +
geom_sf(aes(fill = median_income), linetype = 0.5, lwd = 1) +
geom_point(data = TransitCenter_df, aes(x = Long, y = Lat)) +
coord_sf() +
scale_fill_gradient(low = "blue", high = "yellow")+
labs(title = title_map,
fill = input$map_chart_type)
ggplotly(base_map)
})
plot_data <- data$Estimate.Car.truck.van.households.drove.alone.
View(map_joined_data)
View(map_joined_data)
